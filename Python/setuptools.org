# -*- coding:utf-8 -*-
#+STARTUP: contents indent inlineimages
#+TITLE: setuptools and setup.py

* Getting Started With setuptools and setup.py

from: https://pythonhosted.org/an_example_pypi_project/setuptools.html

=setuptools= is a rich and complex program. This tutorial will focus
on the bare minimum basics you need to get setuptools running so you
can:

- Register your package on pypi.
- Build egg, source, and window installer ‘distributables’.
- Upload these ‘distributables’ to pypi.


** Installing setuptools and easy install

To install setuptools visit http://pypi.python.org/pypi/setuptools and
follow the instructions for your operating system. Also, check out
http://peak.telecommunity.com/DevCenter/EasyInstall for more
instructions on how to install setup tools.

Currently (as of November, 2009), setuptools is pretty easy to install
for Python version 2.3 through 2.6.

*** Bootstrapping setuptools

If you are having trouble setting up setuptools for your platform, you
may want to check out the ‘bootstrap’ setuptools script at
http://peak.telecommunity.com/dist/ez_setup.py.

You can run this like this:

:  $ python ez_setup.py

and it will install setuptools for whichever version of Python python
refers to. For example on windows:

:  $ C:\Python24\python.exe ez_setup.py

will install a setuptools for your python24 distribution.


** Setting up setup.py

All the features of what can go into a =setup.py= file is beyond the
scope of this simple tutorial. I’ll just focus on a very basic and
common format needed to get this project onto pypi.

The contents of setup.py is just pure python:

#+BEGIN_SRC python
  import os
  from setuptools import setup

  # Utility function to read the README file.
  # Used for the long_description.  It's nice, because now 1) we have a top level
  # README file and 2) it's easier to type in the README file than to put a raw
  # string in below ...
  def read(fname):
      return open(os.path.join(os.path.dirname(__file__), fname)).read()

  setup(
      name = "an_example_pypi_project",
      version = "0.0.4",
      author = "Andrew Carter",
      author_email = "andrewjcarter@gmail.com",
      description = ("An demonstration of how to create, document,"
                     " and publish to the cheese shop a5 pypi.org."),
      license = "BSD",
      keywords = "example documentation tutorial",
      url = "http://packages.python.org/an_example_pypi_project",
      packages=['an_example_pypi_project', 'tests'],
      long_description=read('README'),
      classifiers=[
          "Development Status :: 3 - Alpha",
          "Topic :: Utilities",
          "License :: OSI Approved :: BSD License",
      ],
  )
#+END_SRC

*** Directory Structure

The directory structure, so far, should look like this:
#+BEGIN_EXAMPLE
  some_root_dir/
  |-- README
  |-- setup.py
  |-- an_example_pypi_project
  |   |-- __init__.py
  |   |-- useful_1.py
  |   |-- useful_2.py
  |-- tests
  |-- |-- __init__.py
  |-- |-- runall.py
  |-- |-- test0.py
#+END_EXAMPLE

*** README

A nice idea stolen from http://pypi.python.org/pypi/Sphinx-PyPI-upload
is to include a README text file which your code. This would be
visible when someone, say, cloned your repo.

Using the simple read function, it is easy to include this in the
long_description keyword arg for the =setuptools.setup()= function.

*** Classifiers

A really nice website is
http://pypi.python.org/pypi?%3Aaction=list_classifiers which lists all
the classifiers you can use in the setup call.

A sample of this website is:
#+BEGIN_EXAMPLE
  Development Status :: 1 - Planning
  Development Status :: 2 - Pre-Alpha
  Development Status :: 3 - Alpha
  Development Status :: 4 - Beta
  Development Status :: 5 - Production/Stable
  Development Status :: 6 - Mature
  Development Status :: 7 - Inactive
  Environment :: Console
  Environment :: Console :: Curses
  Environment :: Console :: Framebuffer
  Environment :: Console :: Newt
  Environment :: Console :: svgalib
#+END_EXAMPLE


** Using setup.py

The basic usage of setup.py is:

:  $ python setup.py <some_command> <options>

To see all commands type:

:  $ python setup.py --help-commands

And you will get:
#+BEGIN_EXAMPLE
Standard commands:
  build             build everything needed to install
  build_py          "build" pure Python modules (copy to build directory)
  build_ext         build C/C++ extensions (compile/link to build directory)
  build_clib        build C/C++ libraries used by Python extensions
  build_scripts     "build" scripts (copy and fixup #! line)
  clean             clean up temporary files from 'build' command
  install           install everything from build directory
  install_lib       install all Python modules (extensions and pure Python)
  install_headers   install C/C++ header files
  install_scripts   install scripts (Python or otherwise)
  install_data      install data files
  sdist             create a source distribution (tarball, zip file, etc.)
  register          register the distribution with the Python package index
  bdist             create a built (binary) distribution
  bdist_dumb        create a "dumb" built distribution
  bdist_rpm         create an RPM distribution
  bdist_wininst     create an executable installer for MS Windows
  upload            upload binary package to PyPI

Extra commands:
  rotate            delete older distributions, keeping N newest files
  develop           install package in 'development mode'
  setopt            set an option in setup.cfg or another config file
  saveopts          save supplied options to setup.cfg or other config file
  egg_info          create a distribution's .egg-info directory
  upload_sphinx     Upload Sphinx documentation to PyPI
  install_egg_info  Install an .egg-info directory for the package
  alias             define a shortcut to invoke one or more commands
  easy_install      Find/get/install Python packages
  bdist_egg         create an "egg" distribution
  test              run unit tests after in-place build
  build_sphinx      Build Sphinx documentation

usage: setup.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]
   or: setup.py --help [cmd1 cmd2 ...]
   or: setup.py --help-commands
   or: setup.py cmd --help
#+END_EXAMPLE


** Intermezzo: .pypirc file and gpg

In order to interact with pypi, you first need to setup an account. Go
to http://pypi.python.org/pypi and click on Register.

Now, once registered, when you run =setup.py= commands that interact
with pypi you’ll have to enter your username and password each time.

To get around this, place a =.pypirc= file in your =$HOME= directory
on linux. On windows, an you’ll need to set a =HOME= environ var to
point to the directory where this file lives.

The structure of a .pypirc file is pretty simple:
#+BEGIN_EXAMPLE
  [pypirc]
  servers = pypi
  [server-login]
  username:your_awesome_username
  password:your_awesome_password
#+END_EXAMPLE

#+BEGIN_QUOTE
Note

There’s probably away around having your plain text password in this
file, but I don’t know of the solution and haven’t looked into it.
#+END_QUOTE

Also, you often want to sign the files using gpg encryption. Visit
http://www.gnupg.org/ on linux or http://www.gpg4win.org/ on windows
to install this software.


** Registering Your Project

With your =setup.py= and =.pypirc= in place, registering your project
is pretty simple. Just type:

:  $ python setup.py register

I would say more, but it is just that simple.


** Uploading Your Project

There are three major =setup.py= commands we will use:

- *bdist_egg*: This creates an egg file. This is what is necessary so
  someone can use =easy_install your_project=.
- *bdist_wininst*: This will create an =.exe= that will install your
  project on a windows machine.
- *sdist*: This create a raw source distribution which someone can
  download and run =python setup.py= directly.

#+BEGIN_QUOTE
Note

A key point here is you need to run these commands with the version of
python you want to support. We’ll cover this in the =Putting It All
Together With The Full Windows Script= below.
#+END_QUOTE

You can run these commands by themselves and simply create the files
but not upload them. However, for this project, we always marry these
commands with the upload directive which will both build and upload
the necessary files.


** Putting It All Together With The Full Windows Script

This project was build on a windows machine. To best understand how it
all works and the other options used when using setup.py let’s just
look at the =.bat= file I use to build the package and upload it to
pypi:

#+BEGIN_SRC sh
  set HOME=C:\Users\Owner\
  cd C:\eclipse\workspace\HG_AN_EXAMPLE_PYPI_PROJECT
  C:\Python24\python.exe setup.py bdist_egg upload --identity="Andrew Carter" --sign --quiet
  C:\Python25\python.exe setup.py bdist_egg upload --identity="Andrew Carter" --sign --quiet
  C:\Python26\python.exe setup.py bdist_egg upload --identity="Andrew Carter" --sign --quiet
  C:\Python24\python.exe setup.py bdist_wininst --target-version=2.4 register upload --identity="Andrew Carter" --sign --quiet
  C:\Python25\python.exe setup.py bdist_wininst --target-version=2.5 register upload --identity="Andrew Carter" --sign --quiet
  C:\Python26\python.exe setup.py bdist_wininst --target-version=2.6 register upload --identity="Andrew Carter" --sign --quiet
  C:\Python26\python.exe setup.py sdist upload --identity="Andrew Carter" --sign
  pause
#+END_SRC

For linux, it would be pretty much the same commands, just changing
around the directories to point to the correct python versions.

#+BEGIN_QUOTE
Note

I use the set HOME=C:\Users\Owner\ instead of setting an environ variable on windows
#+END_QUOTE

* 简介

经常接触Python的同学可能会注意到，当需要安装第三方python包时，可能会用
到easy_install命令。easy_install是由PEAK(Python Enterprise Application
Kit)开发的setuptools包里带的一个命令，所以使用easy_install实际上是在调
用setuptools来完成安装模块的工作。

Perl 用户比较熟悉 CPAN，而 Ruby 用户则比较熟悉 Gems；引导 setuptools
的 ez_setup 工具和随之而生的扩展后的 easy_install 与
“Cheeseshop”（Python Package Index，也称为 “PyPI”）一起工作来实现
相同的功能。它可以很方便的让您自动下载，编译，安装和管理Python包。

** 优点

相比Python 自带的用于发布 Python 应用程序的模块distutils，setuptools
的真正优点并不在于实现distutils 所能实现的功能——尽管它的确增强了
distutils的功能并简化了setup.py脚本中的内容。setuptools 最大的优势是它
在包管理能力方面的增强。它可以使用一种更加透明的方法来查找、下载并安装
依赖包；并可以在一个包的多个版本中自由进行切换，这些版本都安装在同一个
系统上；也可以声明对某个包的特定版本的需求；还可以只使用一个简单的命令
就能更新到某个包的最新版本。给人印象最为深刻的是，即使有些包的开发人员
可能还从未考虑过任何 setuptools 兼容性问题，我们依然可以使用这些包。

特性:

a. 在构建时使用 EasyInstall 工具自动查找、下载、安装、升级所依赖的软件
   包，EasyInstall 支持通过HTTP、 FTP、 Subversion 以及 SourceForge 下
   载软件包，并能自动扫描 PyPI 上的网页以找到下载链接。(对于熟悉 Perl
   的用户， PyPI 是 Python 领域最接近的 CPAN了)

b. 创建 Python Eggs，一种单文件的可导入的发布格式。

c. 在包中的目录中可以包含数据文件，允许代码访问这些数据文件。(Python
   2.4 distutils 也支持这个特性，不过 setuptools 能为面向 Python 2.3
   的包也提供这样的特性，此外还支持访问压缩包中的数据。)

d. 自动包含程序员的源代码树中的所有包，而不需要在独立的setup.py中逐个
   声明。

e. 自动在源代码发布中包含所有相关的文件，而无需创建MANIFEST.in文件，也
   不必在源代码树改变后强制生成 MANIFEST。

f. 自动为程序员项目中的任意数量的“main”函数生成封装脚本或者 Windows
   (控制台或者图行用户界面) .exe 文件。(注：这并不是 py2exe 的替代方案；
   这里生成的 .exe 需要基于已安装的 Python，而 py2exe 则不需要。)

g. 透明的 Pyrex(Pyrex 允许程序员编写混合 Python 和 C 数据类型的代码，
   并编译为 Python 的 C 扩展。)支持，这样程序员的 setup。py 得以列出
   .pyx 文件并且即使最终用户没有安装 Pyrex 也能够运行(当然这需要程序员
   在源代码发布包中包含 Pyrex 生成的 C 代码)。

h. 对创建命令行别名的支持，setuptools 可以帮助程序员为发布包创建项目需
   要的、每个用户或者全局的快捷方式，这通常用于命令行或选项中。

i. 上传发布包到 PyPI 的支持，setuptools 可以帮助程序员将源码包或者
   eggs 发布到 PyPI 上。

j. 可以以“开发模式”发布程序员的项目，这样它可以出现在 sys.path 中，
   而程序员依然可以直接编辑源代码的工作副本。

k. 方便的为 distutils 扩展新功能或者 setup() 参数，并能够发布可供不同
   的项目重复使用的扩展包，而无需复制代码。

l. 创建具有自动发现扩展功能的可扩展的应用程序或框架，只要在项目的安装
   脚本中简单的声明“入口点(entry points)”即可。

** 安装

使用ez_setup.py安装

这是 setuptools 自豪的一种安装方式，只需要一个大约 8K 作为的脚本
ez_setup.py，就能自动为用户安装包括 setuptools 自身在内的许多 Python
包。

使用这种方式，用户只需要下载 ez_setup.py 并运行，就可以自动下载和安装
适合用户当前 Python 版本的适当的 setuptools egg 文件(当然，用户需要
Python 2.3.5 以上的版本，64 位操作系统的用户则需要 Python 2.4 以上的版
本)。此外，这段脚本还会将可执行的 easy_install 脚本安装到用户所有的操
作系统 Python 可执行脚本正常应该安装的位置(例如，Windows 用户会安装到
Python 安装目录下的 Scripts 目录中)。关于这种安装方法的更详细说明和注
意事项，请参考其官方说明（见扩展阅读）。简单的安装命令如下：

:  wget -q ez_setup.py 下载地址

安装完后，最好确保使用完整的安装包安装

当然，用户也可以使用 setuptools 在 Python Cheese Shop 上发布的合适的完
整的发布版本来安装。对于使用 Windows 的用户，这也是挺方便的方法，。

许多 Linux 发行版的官方包管理仓库都包含 setuptools 的某个版本。例如，
如果你跟我一样使用 Ubuntu ，那安装 setuptools 只是简单的进行如下操作：

:  # apt-get install python-setuptools

* Python包管理工具setuptools详解 

from: http://www.zhuangling.com/learn-python-setuptools-in-detail.html

** 0.什么是setuptools

setuptools是Python distutils增强版的集合，它可以帮助我们更简单的创建和
分发Python包，尤其是拥有依赖关系的。用户在使用setuptools创建的包时，并
不需要已安装setuptools，只要一个启动模块即可。

功能亮点：

-    利用EasyInstall自动查找、下载、安装、升级依赖包
-    创建Python Eggs
-    包含包目录内的数据文件
-    自动包含包目录内的所有的包，而不用在setup.py中列举
-    自动包含包内和发布有关的所有相关文件，而不用创建一个MANIFEST.in文件
-    自动生成经过包装的脚本或Windows执行文件
-    支持Pyrex，即在可以setup.py中列出.pyx文件，而最终用户无须安装Pyrex
-    支持上传到PyPI
-    可以部署开发模式，使项目在sys.path中
-    用新命令或setup()参数扩展distutils，为多个项目发布/重用扩展
-    在项目setup()中简单声明entry points，创建可以自动发现扩展的应用和框架

总之，setuptools就是比distutils好用的多，基本满足大型项目的安装和发布

** 1.安装setuptools

1) 最简单安装，假定在ubuntu下

:  sudo apt-get install python-setuptools

2) 启动脚本安装

:  wget http://peak.telecommunity.com/dist/ez_setup.py
:  sudo python ez_setup.py

** 2.创建一个简单的包

有了setuptools后，创建一个包基本上是无脑操作

:  cd /tmp 
:  mkdir demo
:  cd demo

在demo中创建一个setup.py文件，写入
#+BEGIN_SRC python
  from setuptools import setup, find_packages
  setup(
      name = "demo",
      version = "0.1",
      packages = find_packages(),
  )
#+END_SRC

执行python setup.py bdist_egg即可打包一个test的包了。
#+BEGIN_EXAMPLE
  demo
  |-- build
  |   `-- bdist.linux-x86_64
  |-- demo.egg-info
  |   |-- dependency_links.txt
  |   |-- PKG-INFO
  |   |-- SOURCES.txt
  |   `-- top_level.txt
  |-- dist
  |   `-- demo-0.1-py2.7.egg
  `-- setup.py
#+END_EXAMPLE

在dist中生成的是egg包

: $ file dist/demo-0.1-py2.7.egg
: dist/demo-0.1-py2.7.egg: Zip archive data, at least v2.0 to extract

看一下生成的.egg文件，是个zip包，解开看看先

: $ upzip -l dist/demo-0.1-py2.7.egg

#+BEGIN_EXAMPLE
  Archive:  dist/demo-0.1-py2.7.egg
    Length      Date    Time    Name
  ---------  ---------- -----   ----
          1  2013-06-07 22:03   EGG-INFO/dependency_links.txt
          1  2013-06-07 22:03   EGG-INFO/zip-safe
        120  2013-06-07 22:03   EGG-INFO/SOURCES.txt
          1  2013-06-07 22:03   EGG-INFO/top_level.txt
        176  2013-06-07 22:03   EGG-INFO/PKG-INFO
  ---------                     -------
        299                     5 files
#+END_EXAMPLE

我们可以看到，里面是一系列自动生成的文件。现在可以介绍一下刚刚setup()
中的参数了

-    name 包名
-    version 版本号
-    packages 所包含的其他包

要想发布到PyPI中，需要增加别的参数，这个可以参考官方文档中的例子了。

** 3.给包增加内容

上面生成的egg中没有实质的内容，显然谁也用不了，现在我们稍微调色一下，增加一点内容。

在demo中执行mkdir demo，再创建一个目录，在这个demo目录中创建一个__init__.py的文件，表示这个目录是一个包，然后写入：
#+BEGIN_SRC python
  #!/usr/bin/env python
  #-*- coding:utf-8 -*-

  def test():
      print "hello world!"  

  if __name__ == '__main__':
      test()
#+END_SRC

现在的主目录结构为下：
#+BEGIN_EXAMPLE
  demo
  |-- demo
  |   `-- __init__.py
  `-- setup.py
#+END_EXAMPLE

再次执行python setup.py bdist_egg后，再看egg包
#+BEGIN_EXAMPLE
  Archive:  dist/demo-0.1-py2.7.egg
    Length      Date    Time    Name
  ---------  ---------- -----   ----
          1  2013-06-07 22:23   EGG-INFO/dependency_links.txt
          1  2013-06-07 22:23   EGG-INFO/zip-safe
        137  2013-06-07 22:23   EGG-INFO/SOURCES.txt
          5  2013-06-07 22:23   EGG-INFO/top_level.txt
        176  2013-06-07 22:23   EGG-INFO/PKG-INFO
         95  2013-06-07 22:21   demo/__init__.py
        338  2013-06-07 22:23   demo/__init__.pyc
  ---------                     -------
        753                     7 files
#+END_EXAMPLE

这回包内多了demo目录，显然已经有了我们自己的东西了，安装体验一下。

:  $ python setup.py install

这个命令会讲我们创建的egg安装到python的dist-packages目录下，我这里的位置在

:  $ tree /usr/local/lib/python2.7/dist-packages/demo-0.1-py2.7.egg

查看一下它的结构：
#+BEGIN_EXAMPLE
  /usr/local/lib/python2.7/dist-packages/demo-0.1-py2.7.egg
  |-- demo
  |   |-- __init__.py
  |   `-- __init__.pyc
  `-- EGG-INFO
      |-- dependency_links.txt
      |-- PKG-INFO
      |-- SOURCES.txt
      |-- top_level.txt
      `-- zip-safe
#+END_EXAMPLE

打开python终端或者ipython都行，直接导入我们的包

: >>> import demo
: >>> demo.test()
: hello world!
: >>>

好了，执行成功！

** 4.setuptools进阶

在上例中，在前两例中，我们基本都使用setup()的默认参数，这只能写一些简
单的egg。一旦我们的project逐渐变大以后，维护起来就有点复杂了，下面是
setup()的其他参数，我们可以学习一下

*** 使用find_packages()

对于简单工程来说，手动增加packages参数很容易，刚刚我们用到了这个函数，
它默认在和setup.py同一目录下搜索各个含有__init__.py的包。其实我们可以
将包统一放在一个src目录中，另外，这个包内可能还有aaa.txt文件和data数据
文件夹。

#+BEGIN_EXAMPLE
  demo
  ├── setup.py
  └── src
      └── demo
          ├── __init__.py
          ├── aaa.txt
          └── data
              ├── abc.dat
              └── abcd.dat
#+END_EXAMPLE

如果不加控制，则setuptools只会将__init__.py加入到egg中，想要将这些文件
都添加，需要修改setup.py

#+BEGIN_SRC python
  from setuptools import setup, find_packages
  setup(
      packages = find_packages('src'),  # 包含所有src中的包
      package_dir = {'':'src'},   # 告诉distutils包都在src下

      package_data = {
          # 任何包中的.txt文件，都包含进来
          '': ['*.txt'],
          # 包含demo包data文件夹中的 *.dat文件
          'demo': ['data/*.dat'],
      }
  )
#+END_SRC

这样，在生成的egg中就包含了所需文件了。看看：
#+BEGIN_EXAMPLE
  Archive:  dist/demo-0.0.1-py2.7.egg
    Length     Date   Time    Name
   --------    ----   ----    ----
         88  06-07-13 23:40   demo/__init__.py
        347  06-07-13 23:52   demo/__init__.pyc
          0  06-07-13 23:45   demo/aaa.txt
          0  06-07-13 23:46   demo/data/abc.dat
          0  06-07-13 23:46   demo/data/abcd.dat
          1  06-07-13 23:52   EGG-INFO/dependency_links.txt
        178  06-07-13 23:52   EGG-INFO/PKG-INFO
        157  06-07-13 23:52   EGG-INFO/SOURCES.txt
          5  06-07-13 23:52   EGG-INFO/top_level.txt
          1  06-07-13 23:52   EGG-INFO/zip-safe
   --------                   -------
        777                   10 files
#+END_EXAMPLE

另外，也可以排除一些特定的包，如果在src中再增加一个tests包，可以通过exclude来排除它,

: find_packages(exclude=["*.tests", "*.tests.*", "tests.*", "tests"])

*** 使用entry_points

一个字典，从entry point组名映射到一个表示entry point的字符串或字符串列
表。Entry points是用来支持动态发现服务和插件的，也用来支持自动生成脚本。
这个还是看例子比较好理解：

#+BEGIN_SRC python
  setup(
      entry_points = {
          'console_scripts': [
              'foo = demo:test',
              'bar = demo:test',
          ],
          'gui_scripts': [
              'baz = demo:test',
          ]
      }
  )
#+END_SRC
注：console_scripts 设置的 foo/bar 将会自动生成可执行的脚本，名称就是
foo 和 bar。这两个脚本实际上会去调用demo包的test函数。

修改setup.py增加以上内容以后，再次安装这个egg，可以发现在安装信息里头多了两行代码（Linux下）：

:  Installing foo script to /usr/local/bin
:  Installing bar script to /usr/local/bin

查看/usr/local/bin/foo内容

#+BEGIN_SRC python
  #!/usr/bin/python
  # EASY-INSTALL-ENTRY-SCRIPT: 'demo==0.1','console_scripts','foo'
  __requires__ = 'demo==0.1'
  import sys
  from pkg_resources import load_entry_point

  if __name__ == '__main__':
      sys.exit(
          load_entry_point('demo==0.1', 'console_scripts', 'foo')()
      )
#+END_SRC

这个内容其实显示的意思是，foo将执行console_scripts中定义的foo所代表的
函数。执行foo，发现打出了hello world!，和预期结果一样。

*** 使用Eggsecutable Scripts

从字面上来理解这个词，Eggsecutable是Eggs和executable合成词，翻译过来就
是另eggs可执行。也就是说定义好一个参数以后，可以另你生成的.egg文件可以
被直接执行，貌似Java的.jar也有这机制？不很清楚，下面是使用方法：

#+BEGIN_SRC python
  setup(
      # other arguments here...
      entry_points = {
          'setuptools.installation': [
              'eggsecutable = demo:test',
          ]
      }
  )
#+END_SRC

这么写意味着在执行python *.egg时，会执行我的test()函数，在文档中说需要
将.egg放到PATH路径中。

*** 包含数据文件

在3中我们已经列举了如何包含数据文件，其实setuptools提供的不只这么一种方法，下面是另外两种

1）包含所有包内文件

这种方法中包内所有文件指的是受版本控制（CVS/SVN/GIT等）的文件，或者通
过MANIFEST.in声明的

#+BEGIN_SRC python
  from setuptools import setup, find_packages
  setup(
      ...
      include_package_data = True
  )
#+END_SRC

2）包含一部分，排除一部分

#+BEGIN_SRC python
  from setuptools import setup, find_packages
  setup(
      ...
      packages = find_packages('src'),  
      package_dir = {'':'src'},   

      include_package_data = True,    

      # 排除所有 README.txt
      exclude_package_data = { '': ['README.txt'] },
  )
#+END_SRC

如果没有使用版本控制的话，可以还是使用3中提到的包含方法

*** 可扩展的框架和应用

setuptools可以帮助你将应用变成插件模式，供别的应用使用。官网举例是一个
帮助博客更改输出类型的插件，一个博客可能想要输出不同类型的文章，但是总
自己写输出格式化代码太繁琐，可以借助一个已经写好的应用，在编写博客程序
的时候动态调用其中的代码。

通过entry_points可以定义一系列接口，供别的应用或者自己调用，例如：

#+BEGIN_SRC python
  setup(
      entry_points = {'blogtool.parsers': '.rst = some_module:SomeClass'}
  )

  setup(
      entry_points = {'blogtool.parsers': ['.rst = some_module:a_func']}
  )

  setup(
      entry_points = """
          [blogtool.parsers]
          .rst = some.nested.module:SomeClass.some_classmethod [reST]
      """,
      extras_require = dict(reST = "Docutils>=0.3.5")
  )
#+END_SRC

上面列举了三中定义方式，即我们将我们some_module中的函数，以名字为
blogtool.parsers的借口共享给别的应用。

别的应用使用的方法是通过pkg_resources.require()来导入这些模块。

另外，一个名叫stevedore的库将这个方式做了封装，更加方便进行应用的扩展。
